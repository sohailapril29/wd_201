const { connect } = require("./connectDB.js");
const Todo = require("./TodoModel.js");

const createTodo = async () => {
    try {
        await connect();
        const todo = await Todo.addTask({
            title: "Frist Item",
            dueDate: new Date(),
            completed: false,
        });
        console.log(`Created todo with ID : ${todo.id}`);
    } catch (error) {
        console.error(error);
    }
};

const countItems = async () => {
    try {
        const totalCount = await Todo.count();
        console.log(`Found ${totalCount} items in the table`);
    } catch (error) {
        console.error(error);
    }
}

const getAllTodos = async () => {
    try {
        const todos = await Todo.findAll();
        const todoList = todos.map(todo => todo.displayableString()).join("\n");
        console.log(todoList);
    } catch (error) {
        console.error(error);
    }
}

const getSingleTodo = async () => {
    try {
        const todo = await Todo.findOne({
            where: {
                completed: false
            },
            order: [
                ['id', 'DESC']
            ]
        });

        console.log(todo.displayableString());

    } catch (error) {
        console.error(error);
    }
}

const updateItem = async (id) => {
    try {
        await Todo.update({completed: true}, {
            where: {
                id: id
            }
        });

    } catch (error) {
        console.error(error);
    }
}

const deleteItem = async (id) => {
    try {
        const deleteRowCount = await Todo.destroy({
            where: {
                id: id
            }
        });
        console.log(`Deleted ${deleteRowCount} rows!`);

    } catch (error) {
        console.error(error);
    }
}

(async () => {
    await getAllTodos();
    countItems();
})();

// (async () => {
//     // await createTodo();
//     // await countItems();
//     await getAllTodos();
//     // await updateItem(2);
//     await deleteItem(2);
//     await getAllTodos();
// })();

//////////////////////////////////////////////////////////////////////////////////////////

const todoList = require("../todo");
const formattedDate = (d) => {
    return d.toISOString().split("T")[0];
};

var dateToday = new Date();
const today = formattedDate(dateToday);
const yesterday = formattedDate(
    new Date(new Date().setDate(dateToday.getDate() - 1))
);
const tomorrow = formattedDate(
    new Date(new Date().setDate(dateToday.getDate() + 1))
);
const { all, markAsComplete, add, overdue, dueToday, dueLater } = todoList();

describe("TodoList Test Suite", () => {
    beforeAll(() => {
        add({
            title: "todo1",
            completed: false,
            dueDate: today,
        });
        add({
            title: "todo2",
            completed: false,
            dueDate: yesterday,
        });
        add({
            title: "todo3",
            completed: false,
            dueDate: tomorrow,
        });
    });
    test("add", () => {
        const count = all.length;
        add({
            title: "todo4",
            completed: true,
            dueDate: today,
        });
        expect(all.length).toBe(count + 1);
    });
    test("markAsComplete", () => {
        expect(all[0].completed).toBe(false);
        markAsComplete(0);
        expect(all[0].completed).toBe(true);
    });

    test("overdue_items", () => {
        let overdue_list = overdue();
        expect(overdue_list.length).toBe(1);
        expect(overdue_list[0]).toBe(all[1]);
    });
    test("dueToday_items", () => {
        let dueToday_list = dueToday();
        expect(dueToday_list.length).toBe(2);
        expect(dueToday_list[0]).toBe(all[0]);
        expect(dueToday_list[1]).toBe(all[3]);
    });
    test("dueLater_items", () => {
        let dueLater_list = dueLater();
        expect(dueLater_list.length).toBe(1);
        expect(dueLater_list[0]).toBe(all[2]);
    });
});

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

tests/todos

const todoList = require("../todo");
const formattedDate = (d) => {
    return d.toISOString().split("T")[0];
};

var dateToday = new Date();
const today = formattedDate(dateToday);
const yesterday = formattedDate(
    new Date(new Date().setDate(dateToday.getDate() - 1))
);
const tomorrow = formattedDate(
    new Date(new Date().setDate(dateToday.getDate() + 1))
);
const { all, markAsComplete, add, overdue, dueToday, dueLater } = todoList();

describe("TodoList Test Suite", () => {
    beforeAll(() => {
        add({
            title: "todo1",
            completed: false,
            dueDate: today,
        });
        add({
            title: "todo2",
            completed: false,
            dueDate: yesterday,
        });
        add({
            title: "todo3",
            completed: false,
            dueDate: tomorrow,
        });
    });
    test("add", () => {
        const count = all.length;
        add({
            title: "todo4",
            completed: true,
            dueDate: today,
        });
        expect(all.length).toBe(count + 1);
    });
    test("markAsComplete", () => {
        expect(all[0].completed).toBe(false);
        markAsComplete(0);
        expect(all[0].completed).toBe(true);
    });

    test("overdue_items", () => {
        let overdue_list = overdue();
        expect(overdue_list.length).toBe(1);
        expect(overdue_list[0]).toBe(all[1]);
    });
    test("dueToday_items", () => {
        let dueToday_list = dueToday();
        expect(dueToday_list.length).toBe(2);
        expect(dueToday_list[0]).toBe(all[0]);
        expect(dueToday_list[1]).toBe(all[3]);
    });
    test("dueLater_items", () => {
        let dueLater_list = dueLater();
        expect(dueLater_list.length).toBe(1);
        expect(dueLater_list[0]).toBe(all[2]);
    });
});

const request = require("supertest");

const db = require("../models/index");
const app = require("../app");

let server, agent;

describe("Todo test suite", () => {
    beforeAll(async () => {
        await db.sequelize.sync({ force: true});
        server = app.listen(3000, () => { });
        agent = request.agent(server);
    });
    afterAll( async () => {
        await db.sequelize.close();
        server.close();
    })
    test("responds with json at /todos", async () => {
        const response = await agent.post("/todos").send({
          title: "Buy milk",
          dueDate: new Date().toISOString(),
          completed: false,
        });
        expect(response.statusCode).toBe(200);
        expect(response.header["content-type"]).toBe(
          "application/json; charset=utf-8"
        );
        const parsedResponse = JSON.parse(response.text);
        expect(parsedResponse.id).toBeDefined();
      });
})
////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
models/todos.js
'use strict';
const {
  Model
} = require('sequelize');
module.exports = (sequelize, DataTypes) => {
  class Todo extends Model {
    /**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */
    static associate(models) {
      // define association here
    }
    static addTodo({ title, dueDate }) {
      return this.create({ title: title, dueDate: dueDate, completed: false }) 
    }

    static getTodos() {
      return this.findAll();
    }

    markAsCompleted() {
      return this.update({ completed: true })
    }
  }
  Todo.init({
    title: DataTypes.STRING,
    dueDate: DataTypes.DATEONLY,
    completed: DataTypes.BOOLEAN
  }, {
    sequelize,
    modelName: 'Todo',
  });
  return Todo;
};

###########################################################################
overdue

Have to pay electricity bill
Recharge mobile

Due today
Buy grocery itemsRenew health insurance
Renew health insurance

Due Later
Book flight ticket
Book hotel room


############################################################
december 2022 12 date tests 
// test("Marks a todo with the given ID as complete", async () => {
  //   const response = await agent.post("/todos").send({
  //     title: "Buy milk",
  //     dueDate: new Date().toISOString(),
  //     completed: false,
  //   });
  //   const parsedResponse = JSON.parse(response.text);
  //   const todoID = parsedResponse.id;

  //   expect(parsedResponse.completed).toBe(false);

  //   const markCompleteResponse = await agent
  //     .put(`/todos/${todoID}/markASCompleted`)
  //     .send();
  //   const parsedUpdateResponse = JSON.parse(markCompleteResponse.text);
  //   expect(parsedUpdateResponse.completed).toBe(true);
  // });

  // test("Fetches all todos in the database using /todos endpoint", async () => {
  //   await agent.post("/todos").send({
  //     title: "Buy xbox",
  //     dueDate: new Date().toISOString(),
  //     completed: false,
  //   });
  //   await agent.post("/todos").send({
  //     title: "Buy ps3",
  //     dueDate: new Date().toISOString(),
  //     completed: false,
  //   });
  //   const response = await agent.get("/todos");
  //   const parsedResponse = JSON.parse(response.text);

  //   expect(parsedResponse.length).toBe(4);
  //   expect(parsedResponse[3]["title"]).toBe("Buy ps3");
  // });

  // test("Deletes a todo with the given ID if it exists and sends a boolean response", async () => {
  //   // FILL IN YOUR CODE HERE
  //   const response = await agent.post("/todos").send({
  //     title: "Buy a milk powder",
  //     dueDate: new Date().toISOString(),
  //     completed: false,
  //   });

  //   const parsedResponse = JSON.parse(response.text);
  //   const todoID = parsedResponse.id;

  //   const deleteExistingRecordResponse = await agent
  //     .delete(`/todos/${todoID}`)
  //     .send();
  //   const parsedDeleteExistingRecordResponse = JSON.parse(
  //     deleteExistingRecordResponse.text
  //   );

  //   expect(parsedDeleteExistingRecordResponse).toBe(true);

  //   const deleteNonExistingRecord = await agent.delete(`/todos/1321`).send();
  //   const parseddeleteNonExistingRecord = JSON.parse(
  //     deleteNonExistingRecord.text
  //   );
  //   expect(parseddeleteNonExistingRecord).toBe(false);
  // });